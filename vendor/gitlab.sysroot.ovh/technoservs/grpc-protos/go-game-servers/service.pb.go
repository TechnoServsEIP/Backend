// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package game_servers

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xb1, 0x6e, 0x13, 0x41,
	0x10, 0x40, 0xb5, 0x14, 0x08, 0x56, 0x17, 0x88, 0xc7, 0x0e, 0x8e, 0x4c, 0xd2, 0x1c, 0x34, 0x9c,
	0xe1, 0x8e, 0x38, 0x10, 0xa4, 0x74, 0x40, 0x50, 0x1a, 0x2a, 0x2c, 0x9a, 0x34, 0xd1, 0x61, 0x8f,
	0xcc, 0x49, 0xf6, 0xee, 0x71, 0xbb, 0x8e, 0x14, 0xa1, 0x34, 0x29, 0xa8, 0x91, 0x28, 0x28, 0x28,
	0xf8, 0x02, 0x0a, 0x24, 0xfe, 0x84, 0x5f, 0xe0, 0x43, 0x90, 0xf7, 0x66, 0xbd, 0x77, 0x36, 0x86,
	0x35, 0x9d, 0x6f, 0xf6, 0xcd, 0xcc, 0xd3, 0xac, 0x76, 0xcc, 0x37, 0x14, 0x16, 0x67, 0xd9, 0x00,
	0xe3, 0xbc, 0x90, 0x5a, 0xc2, 0xb6, 0xc6, 0xc1, 0x5b, 0x21, 0x67, 0x41, 0x15, 0x8f, 0xd2, 0x09,
	0x9e, 0xce, 0x7e, 0x62, 0xa1, 0x3a, 0x3b, 0x23, 0x29, 0x47, 0x63, 0x4c, 0xd2, 0x3c, 0x4b, 0x52,
	0x21, 0xa4, 0x4e, 0x75, 0x26, 0x85, 0x2a, 0xf3, 0x3a, 0x41, 0x89, 0xd1, 0x57, 0xb3, 0xfc, 0x3a,
	0x4d, 0x07, 0x33, 0x86, 0x82, 0x6d, 0x0a, 0x0e, 0x31, 0x1f, 0xcb, 0xf3, 0x09, 0x0a, 0x4d, 0x07,
	0xdb, 0x74, 0x80, 0xe2, 0x2c, 0x2b, 0xa4, 0x70, 0x27, 0xbd, 0x8f, 0x01, 0x6f, 0x1c, 0xa7, 0x13,
	0xec, 0x1b, 0xa0, 0x5f, 0x9a, 0xc2, 0x39, 0xe7, 0x2f, 0x33, 0xa5, 0xcb, 0x20, 0x74, 0xe3, 0x55,
	0xca, 0xb1, 0xa3, 0x5e, 0xe1, 0xbb, 0x29, 0x2a, 0xdd, 0xb9, 0xef, 0x07, 0xab, 0x5c, 0x0a, 0x85,
	0xe1, 0xe6, 0xe5, 0xcf, 0x5f, 0x9f, 0xae, 0x70, 0xb8, 0x96, 0x10, 0x04, 0x17, 0xfc, 0xfa, 0x31,
	0xda, 0xce, 0xd1, 0xea, 0x62, 0x73, 0xc8, 0x36, 0xee, 0x7a, 0xb1, 0xd4, 0xb7, 0x6d, 0xfa, 0x36,
	0xe0, 0xa6, 0xed, 0x9b, 0xbc, 0x9f, 0x4e, 0xb3, 0xe1, 0x05, 0x5c, 0x32, 0x1e, 0x3c, 0x2f, 0x30,
	0xd5, 0x34, 0x11, 0x78, 0xb0, 0xba, 0x6c, 0x95, 0xb3, 0x16, 0xb1, 0x2f, 0x4e, 0x22, 0x4d, 0x23,
	0xb2, 0x11, 0xce, 0x07, 0x70, 0xc8, 0x22, 0xf8, 0xca, 0x78, 0xf0, 0x3a, 0x1f, 0x7a, 0x49, 0x54,
	0x39, 0x0f, 0x89, 0x3a, 0x4e, 0x12, 0x0f, 0x8d, 0x44, 0xd4, 0x59, 0x9c, 0xc6, 0x21, 0x8b, 0x4e,
	0x5a, 0xbd, 0x3f, 0x44, 0xe1, 0x03, 0xe3, 0xc1, 0x11, 0x8e, 0xd1, 0xc7, 0xb0, 0xca, 0x79, 0x18,
	0xd6, 0xf1, 0xfa, 0x7d, 0x45, 0x4b, 0xf7, 0xf5, 0x85, 0xf1, 0x46, 0x5f, 0xa7, 0x05, 0x5d, 0xf0,
	0x53, 0xf3, 0x1c, 0xa0, 0xb7, 0xba, 0xfc, 0x12, 0x6c, 0x95, 0xf6, 0xd7, 0xca, 0x21, 0xaf, 0x5d,
	0xe3, 0xd5, 0x0e, 0xb7, 0x16, 0xbc, 0x12, 0x35, 0x4b, 0x81, 0xcf, 0x8c, 0x6f, 0xf6, 0xb5, 0xcc,
	0x6b, 0x72, 0x7b, 0x7f, 0x6b, 0x54, 0x67, 0xad, 0x5b, 0x6f, 0x9d, 0x14, 0x52, 0xdb, 0x31, 0x6a,
	0xb7, 0xc2, 0xd6, 0xb2, 0x9a, 0xcc, 0xe1, 0x1b, 0xe3, 0x5b, 0xee, 0x3d, 0xbe, 0x70, 0x7b, 0x01,
	0x0e, 0x7c, 0x1e, 0x70, 0x25, 0xc1, 0x3a, 0x3e, 0x59, 0x3b, 0x8f, 0x44, 0xef, 0x18, 0xd1, 0x5d,
	0xb8, 0xbd, 0x28, 0x5a, 0xd9, 0x56, 0xf0, 0x9d, 0xf1, 0x96, 0x2b, 0x73, 0x34, 0x5f, 0x70, 0xf0,
	0xd8, 0xa7, 0xad, 0xe3, 0xad, 0xed, 0xc1, 0xba, 0x69, 0x24, 0x1b, 0x19, 0xd9, 0xbb, 0x10, 0x3a,
	0x59, 0xda, 0xad, 0xa5, 0xb3, 0x5b, 0xbd, 0x0a, 0x7e, 0x30, 0xde, 0x9c, 0xaf, 0x9e, 0x8a, 0xf2,
	0x23, 0x8f, 0x4d, 0xb5, 0x6c, 0xfc, 0x5f, 0x59, 0xe1, 0x9e, 0xf1, 0xed, 0xc2, 0xbd, 0x7f, 0xfb,
	0xd2, 0xd8, 0x9f, 0xdd, 0x38, 0x09, 0xaa, 0xd5, 0xdf, 0x5c, 0x35, 0xff, 0x14, 0xfb, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xa4, 0xfb, 0x72, 0xc8, 0xc8, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for GameServerService service

type GameServerServiceClient interface {
	// Server
	ListServer(ctx context.Context, in *ListServerRequest, opts ...client.CallOption) (*ListServerResponse, error)
	GetServer(ctx context.Context, in *GetServerRequest, opts ...client.CallOption) (*GetServerResponse, error)
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...client.CallOption) (*CreateServerResponse, error)
	UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...client.CallOption) (*UpdateServerResponse, error)
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...client.CallOption) (*DeleteServerResponse, error)
	// Server Actions
	StartServerAction(ctx context.Context, in *StartServerActionRequest, opts ...client.CallOption) (*StartServerActionResponse, error)
	StopServerAction(ctx context.Context, in *StopServerActionRequest, opts ...client.CallOption) (*StopServerActionResponse, error)
	// Server Environment
	ListServerEnvironment(ctx context.Context, in *ListServerEnvironmentRequest, opts ...client.CallOption) (*ListServerEnvironmentResponse, error)
	// Server Deployments
	ListServerDeployment(ctx context.Context, in *ListServerDeploymentRequest, opts ...client.CallOption) (*ListServerDeploymentResponse, error)
	GetServerDeployment(ctx context.Context, in *GetServerDeploymentRequest, opts ...client.CallOption) (*GetServerDeploymentRequest, error)
}

type gameServerServiceClient struct {
	c           client.Client
	serviceName string
}

func NewGameServerServiceClient(serviceName string, c client.Client) GameServerServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "technoservs.game_servers"
	}
	return &gameServerServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *gameServerServiceClient) ListServer(ctx context.Context, in *ListServerRequest, opts ...client.CallOption) (*ListServerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "GameServerService.ListServer", in)
	out := new(ListServerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...client.CallOption) (*GetServerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "GameServerService.GetServer", in)
	out := new(GetServerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...client.CallOption) (*CreateServerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "GameServerService.CreateServer", in)
	out := new(CreateServerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...client.CallOption) (*UpdateServerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "GameServerService.UpdateServer", in)
	out := new(UpdateServerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...client.CallOption) (*DeleteServerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "GameServerService.DeleteServer", in)
	out := new(DeleteServerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) StartServerAction(ctx context.Context, in *StartServerActionRequest, opts ...client.CallOption) (*StartServerActionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "GameServerService.StartServerAction", in)
	out := new(StartServerActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) StopServerAction(ctx context.Context, in *StopServerActionRequest, opts ...client.CallOption) (*StopServerActionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "GameServerService.StopServerAction", in)
	out := new(StopServerActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) ListServerEnvironment(ctx context.Context, in *ListServerEnvironmentRequest, opts ...client.CallOption) (*ListServerEnvironmentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "GameServerService.ListServerEnvironment", in)
	out := new(ListServerEnvironmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) ListServerDeployment(ctx context.Context, in *ListServerDeploymentRequest, opts ...client.CallOption) (*ListServerDeploymentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "GameServerService.ListServerDeployment", in)
	out := new(ListServerDeploymentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) GetServerDeployment(ctx context.Context, in *GetServerDeploymentRequest, opts ...client.CallOption) (*GetServerDeploymentRequest, error) {
	req := c.c.NewRequest(c.serviceName, "GameServerService.GetServerDeployment", in)
	out := new(GetServerDeploymentRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GameServerService service

type GameServerServiceHandler interface {
	// Server
	ListServer(context.Context, *ListServerRequest, *ListServerResponse) error
	GetServer(context.Context, *GetServerRequest, *GetServerResponse) error
	CreateServer(context.Context, *CreateServerRequest, *CreateServerResponse) error
	UpdateServer(context.Context, *UpdateServerRequest, *UpdateServerResponse) error
	DeleteServer(context.Context, *DeleteServerRequest, *DeleteServerResponse) error
	// Server Actions
	StartServerAction(context.Context, *StartServerActionRequest, *StartServerActionResponse) error
	StopServerAction(context.Context, *StopServerActionRequest, *StopServerActionResponse) error
	// Server Environment
	ListServerEnvironment(context.Context, *ListServerEnvironmentRequest, *ListServerEnvironmentResponse) error
	// Server Deployments
	ListServerDeployment(context.Context, *ListServerDeploymentRequest, *ListServerDeploymentResponse) error
	GetServerDeployment(context.Context, *GetServerDeploymentRequest, *GetServerDeploymentRequest) error
}

func RegisterGameServerServiceHandler(s server.Server, hdlr GameServerServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&GameServerService{hdlr}, opts...))
}

type GameServerService struct {
	GameServerServiceHandler
}

func (h *GameServerService) ListServer(ctx context.Context, in *ListServerRequest, out *ListServerResponse) error {
	return h.GameServerServiceHandler.ListServer(ctx, in, out)
}

func (h *GameServerService) GetServer(ctx context.Context, in *GetServerRequest, out *GetServerResponse) error {
	return h.GameServerServiceHandler.GetServer(ctx, in, out)
}

func (h *GameServerService) CreateServer(ctx context.Context, in *CreateServerRequest, out *CreateServerResponse) error {
	return h.GameServerServiceHandler.CreateServer(ctx, in, out)
}

func (h *GameServerService) UpdateServer(ctx context.Context, in *UpdateServerRequest, out *UpdateServerResponse) error {
	return h.GameServerServiceHandler.UpdateServer(ctx, in, out)
}

func (h *GameServerService) DeleteServer(ctx context.Context, in *DeleteServerRequest, out *DeleteServerResponse) error {
	return h.GameServerServiceHandler.DeleteServer(ctx, in, out)
}

func (h *GameServerService) StartServerAction(ctx context.Context, in *StartServerActionRequest, out *StartServerActionResponse) error {
	return h.GameServerServiceHandler.StartServerAction(ctx, in, out)
}

func (h *GameServerService) StopServerAction(ctx context.Context, in *StopServerActionRequest, out *StopServerActionResponse) error {
	return h.GameServerServiceHandler.StopServerAction(ctx, in, out)
}

func (h *GameServerService) ListServerEnvironment(ctx context.Context, in *ListServerEnvironmentRequest, out *ListServerEnvironmentResponse) error {
	return h.GameServerServiceHandler.ListServerEnvironment(ctx, in, out)
}

func (h *GameServerService) ListServerDeployment(ctx context.Context, in *ListServerDeploymentRequest, out *ListServerDeploymentResponse) error {
	return h.GameServerServiceHandler.ListServerDeployment(ctx, in, out)
}

func (h *GameServerService) GetServerDeployment(ctx context.Context, in *GetServerDeploymentRequest, out *GetServerDeploymentRequest) error {
	return h.GameServerServiceHandler.GetServerDeployment(ctx, in, out)
}
