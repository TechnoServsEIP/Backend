@startuml
namespace models {
    class Account << (S,Aquamarine) >> {
        + Role string
        + Email string
        + Password string
        + Token string
        + Verified bool
        + Activate bool

        - generateJWT() (string, error)

        + Validate() (<font color=blue>map</font>[string]<font color=blue>interface</font>{}, bool)
        + Create() <font color=blue>map</font>[string]<font color=blue>interface</font>{}
         {static} Update(id int, fieldsToUpdate <font color=blue>map</font>[string]<font color=blue>interface</font>{}) *Account
         {static} DeactivateUser(id int) <font color=blue>interface</font>{}
         {static} ActivateUser(id int) <font color=blue>interface</font>{}
         {static} ChangePassword(password string, id uint) error
    }

    class Docker << (S,Aquamarine) >> {
        + UserId string
        + Game string
        + ServerName string
        {static} ListDockerByUserId(id uint) *Docker

    }
    class DockerDelete << (S,Aquamarine) >> {
        + UserId string
        + ContainerId string

    }
    class DockerHistory << (S,Aquamarine) >> {
        + UserId string
        + IdDocker string
        + ActivityTimeStart time.Time
        + ActivityTimeStop time.Time
        + InsertStartActivityContainer() map[string]interface{}
        + InsertStopActivityContainer(userId uint, containerId string) map[string]interface{}
        + GetUserActivity(userId uint) map[string]interface{}

    }
    class DockerList << (S,Aquamarine) >> {
        + UserId string

    }
    class DockerStore << (S,Aquamarine) >> {
        + IdDocker string
        + Game string
        + ServerName string
        + ServerStatus string
        + UserId uint
        + Settings *types.ContainerJSON

        + Validate() (<font color=blue>map</font>[string]<font color=blue>interface</font>{}, bool)
        + Create() <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        + Update() <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        + UpdateServerStatus(status string) error
        + UpdateGameServer(gameSrv *GameServer) error
        {static} UserServers(id uint) *[]DockerStore
        {static} OneUserServer(id uint, docker_id string) *DockerStore
        {static} ListAllDockers() *[]DockerStore
        {static} RemoveContainer(user_id uint, docker_id string) <font color=blue>map</font>[string]<font color=blue>interface</font>{}

    }
    class GameServer << (S,Aquamarine) >> {
        + UserId string
        + ContainerId string
        + ServerName string

    }
    class Token << (S,Aquamarine) >> {
        + UserId uint
        + Role string

    }
}
namespace App {
      class Auth {
        {static} JwtAuthentication(next http.Handler) http.Handler
        {static} DecryptToken(tokenString string) (jwt.Claims, bool, error)
    }
    class Cors {
        {static} Cors(next http.Handler) http.Handler
    }
        class Base {
        {static} *gorm.DB db
        {static} Initialization()
        {static} GetDB() *gorm.DB
    }
}
namespace Controllers {
        class AuthController {
        {static} CreateController(w http.ResponseWriter, r *http.Request)
        {static} Authenticate(w http.ResponseWriter, r *http.Request)
        {static} Confirm(w http.ResponseWriter, r *http.Request)
        {static} UpdateAccount(w http.ResponseWriter, r *http.Request)

    }
    class DockerController {
        {static} GetAllPortBinded() []string
        {static} CreateDocker(w http.ResponseWriter, r *http.Request)
        {static} StartDocker(w http.ResponseWriter, r *http.Request)
        {static} StopDocker(w http.ResponseWriter, r *http.Request)
        {static} GetServerLogs(w http.ResponseWriter, r *http.Request)
        {static} DeleteDocker(w http.ResponseWriter, r *http.Request)
        {static} ListUserServers(w http.ResponseWriter, r *http.Request)
        {static} GetInfosUserServer(w http.ResponseWriter, r *http.Request)
        {static} GetNumberPlayers(containerId string) <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        {static} GetPlayersOnline(w http.ResponseWriter, r *http.Request)
        {static} ModifyGameServer(w http.ResponseWriter, r *http.Request)
        {static} checkIfUserCanCreate(UserId string) bool
    }
    class HomeController {
        {static} Home(w http.ResponseWriter, r *http.Request)
    }
    class UserController {
        {static} GetUsers(w http.ResponseWriter, r *http.Request)
        {static} Activate(w http.ResponseWriter, r *http.Request)
        {static} Deactivate(w http.ResponseWriter, r *http.Request)
        {static} SendPasswordReset(w http.ResponseWriter, r *http.Request)
        {static} ChangePassword(w http.ResponseWriter, r *http.Request)
        {static} GetEmail(w http.ResponseWriter, r *http.Request)
        
    }
}
"gorm.Model" *-- "models.Account"
"gorm.Model" *-- "models.DockerStore"
"gorm.Model" *-- "models.DockerHistory"
"jwt.StandardClaims" *-- "models.Token"


@enduml